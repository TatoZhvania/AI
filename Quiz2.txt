import pandas as pd


# file_path = '/Football.csv'
football_data = pd.read_csv("Football.csv")
football_data=football_data.head(2000)
football_data.head(), football_data.describe(include='all')



from sklearn.preprocessing import StandardScaler


columns_to_scale = ['age', 'height_cm', 'weight_kg', 'overall', 'potential', 'skill_moves']
data_selected = football_data[columns_to_scale]


scaler = StandardScaler()
data_scaled = scaler.fit_transform(data_selected)
data_scaled_df = pd.DataFrame(data_scaled, columns=columns_to_scale)
data_scaled_df.head()




import matplotlib.pyplot as plt
from sklearn.manifold import TSNE
from sklearn.cluster import KMeans


tsne = TSNE(n_components=2, random_state=42)
data_tsne = tsne.fit_transform(data_scaled_df)


data_tsne_df = pd.DataFrame(data_tsne, columns=['TSNE1', 'TSNE2'])


plt.figure(figsize=(8, 6))
plt.scatter(data_tsne_df['TSNE1'], data_tsne_df['TSNE2'], alpha=0.5)
plt.title('Data after t-SNE')
plt.xlabel('TSNE1')
plt.ylabel('TSNE2')
plt.show()


kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(data_tsne_df)
clusters = kmeans.predict(data_tsne_df)


data_tsne_df['cluster'] = clusters

plt.figure(figsize=(8, 6))
plt.scatter(data_tsne_df['TSNE1'], data_tsne_df['TSNE2'], c=data_tsne_df['cluster'], alpha=0.5)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='red', label='Centers')
plt.title('Clusters with KMeans')
plt.xlabel('TSNE1')
plt.ylabel('TSNE2')
plt.legend()
plt.show()




inertia = []
for k in range(1, 10):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(data_tsne_df[['TSNE1', 'TSNE2']])
    inertia.append(kmeans.inertia_)

plt.figure(figsize=(8, 6))
plt.plot(range(1, 10), inertia, marker='o')
plt.title('Elbow Method to Determine Optimal Cluster Number')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.show()