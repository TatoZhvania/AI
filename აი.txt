********CLUSTER EXAMPLE********

# -*- coding: utf-8 -*-
"""Clustering_Example.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13zzHhAaXFpJVQ3KW3EMe8cxJx7THHmaB
"""

import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

data =pd.read_csv("https://raw.githubusercontent.com/JangirSumit/kmeans-clustering/master/driver-data.csv")
data.drop("id",axis=1,inplace=True)
data.head()

data =data.values

plt.scatter(data[:,0],data[:,1])

model =KMeans(n_clusters=3)
model.fit(data)
predicted =model.predict(data)

plt.scatter(data[:,0],data[:,1],c=predicted) #color different cluster with different color
plt.scatter(model.cluster_centers_[:,0],model.cluster_centers_[:,1],s=90, c="red")

from sklearn.metrics import silhouette_score
silhouette_score(data,predicted)

from sklearn.preprocessing import LabelEncoder
mylabel =LabelEncoder()
fires =pd.read_csv("https://raw.githubusercontent.com/joanby/python-ml-course/master/datasets/forest-fires/forestfires.csv")
# fires.drop("area")
fires['month'] =mylabel.fit_transform(fires['month'])
fires['day'] =mylabel.fit_transform(fires['day'])
fires.head()

from sklearn.preprocessing import MinMaxScaler

fires =MinMaxScaler().fit_transform(fires)

from sklearn.manifold import TSNE
mytsne =TSNE(n_components=2,perplexity =40)
fires =mytsne.fit_transform(fires)

fires

plt.scatter(fires[:,0],fires[:,1])






********GRID SEARCH**********

# -*- coding: utf-8 -*-
"""Grid_Search.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c2bqwUZ_FQrB_5ufm35tZW_-S4wO2aLL
"""

import pandas as pd
data =pd.read_csv("https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv",header=None)
data.head()

data.iloc[:,4].value_counts()

from sklearn.preprocessing import LabelEncoder
data.iloc[:,4] =LabelEncoder().fit_transform(data.iloc[:,4])
data.head()

data.iloc[:,4].value_counts()

y =data.iloc[:,4].values
X =data.iloc[:,0:4].values

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test  =train_test_split(X,y,test_size=0.1,random_state=1)

from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
model =SVC()

parameters ={"C":[0.9,0.8,0.7,0.6],"kernel":["rbf","sigmoid","linear"]}
hybrid =GridSearchCV(model,parameters,scoring='accuracy',cv=3,verbose=4)
hybrid.fit(X_train,y_train)